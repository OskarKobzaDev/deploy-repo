version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  #Resume app
  app_resume:
    build:
      context: ./prod_My_Resume
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    container_name: app_resume
    volumes:
      - ./prod_My_Resume/:/var/www/prod_My_Resume
      - ./prod_My_Resume/storage/app/public:/var/www/prod_My_Resume/public/storage
      - ./prod_My_Resume/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
    ports:
      - "9000:9000"
    networks:
      - app-network
  npm_resume:
    image: node:22-alpine
    user: "${UID}:${GID}"
    container_name: npm_resume
    volumes:
      - ./prod_My_Resume/:/var/www/prod_My_Resume
    working_dir: /var/www/prod_My_Resume
    entrypoint: [ 'npm' ]
    ports:
      - "5173:5173"
    networks:
      - app-network
  artisan_resume:
    build:
      context: ./prod_My_Resume
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    container_name: artisan_resume
    volumes:
      - ./prod_My_Resume/:/var/www/prod_My_Resume
    depends_on:
      - db
    working_dir: /var/www/prod_My_Resume
    entrypoint: [ '/var/www/prod_My_Resume/artisan' ]
    networks:
      - app-network
  composer_resume:
    image: composer:latest
    user: "${UID}:${GID}"
    container_name: composer_resume
    volumes:
      - ./prod_My_Resume/:/var/www/prod_My_Resume
    working_dir: /var/www/prod_My_Resume
    networks:
      - app-network
  #StoryTime App
  app_storytime:
    build:
      context: ./StoryTime
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    container_name: app_storytime
    volumes:
      - ./StoryTime/:/var/www/StoryTime
      - ./StoryTime/storage/app/public:/var/www/StoryTime/public/storage
      - ./StoryTime/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
    ports:
      - "9001:9000"
    networks:
      - app-network
  npm_storytime:
    image: node:22-alpine
    user: "${UID}:${GID}"
    container_name: npm_storytime
    volumes:
      - ./StoryTime/:/var/www/StoryTime
    working_dir: /var/www/StoryTime
    entrypoint: [ 'npm' ]
    ports:
      - "5174:5174"
    networks:
      - app-network
  artisan_storytime:
    build:
      context: ./StoryTime
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    container_name: artisan_storytime
    volumes:
      - ./StoryTime/:/var/www/StoryTime
    depends_on:
      - db
    working_dir: /var/www/StoryTime
    entrypoint: [ '/var/www/StoryTime/artisan' ]
    networks:
      - app-network
  composer_storytime:
    image: composer:latest
    user: "${UID}:${GID}"
    container_name: composer_storytime
    volumes:
      - ./StoryTime/:/var/www/StoryTime
    working_dir: /var/www/StoryTime
    networks:
      - app-network
  meilisearch_storytime:
    image: getmeili/meilisearch:latest
    user: "${UID}:${GID}"
    container_name: meilisearch_storytime
    ports:
      - "7700:7700"
    networks:
      - app-network
    volumes:
      - meili_data:/data.ms
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_KEY}
  # Baza Danych MySQL
  db:
    image: mysql:8.0
    user: "${UID}:${GID}"
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: my_resume
      MYSQL_USER: apps
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      SERVICE_TAGS: prod
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    ports:
      - "3306:3306"

  #Server Redis
  redis:
    image: redis:alpine
    user: "${UID}:${GID}"
    container_name: redis
    networks:
      - app-network
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

  # Serwer Nginx
  nginx:
    image: nginx:latest
    user: "${UID}:${GID}"
    container_name: my-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/logs:/var/log/nginx
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./prod_My_Resume:/var/www/prod_My_Resume
      - ./StoryTime:/var/www/StoryTime
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app_resume
      - app_storytime
      - db
    networks:
      - app-network

  # Certbot
  certbot_init:
    image: certbot/certbot
    container_name: certbot-init
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./certbot/logs:/var/log/letsencrypt
      - ./certbot/work:/var/www/certbot/work
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/options-ssl-nginx.conf ]; then
          cp /usr/share/letsencrypt/options-ssl-nginx.conf /etc/letsencrypt/
        fi
      "
    networks:
      - app-network

volumes:
  dbdata:
    driver: local
  meili_data:
