env:
  UID: 1000
  GID: 33

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Check user
      run: |
        whoami
        id

    - name: Reset ownership via Docker
      run: |
        docker run --rm \
          -v /home/oskar/var/www/deploy-repo:/data \
          alpine \
          chown -R "${UID}:${GID}" /data || true

    - name: Remove old repo
      run: rm -rf /home/oskar/var/www/deploy-repo

    - name: Clone fresh repo with submodules
      run: |
        git clone --recurse-submodules git@github.com:OskarKobzaDev/deploy-repo.git /home/oskar/var/www/deploy-repo

    - name: Copy .env files
      run: |
        cp /home/oskar/var/www/deploy-repo/prod_My_Resume/.env.prod.example /home/oskar/var/www/deploy-repo/prod_My_Resume/.env
        cp /home/oskar/var/www/deploy-repo/StoryTime/.env.prod.example /home/oskar/var/www/deploy-repo/StoryTime/.env

    - name: Create .env file for docker compose
      run: |
        cd /home/oskar/var/www/deploy-repo
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env
        echo "MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
        echo "MEILISEARCH_KEY=${{ secrets.MEILISEARCH_KEY }}" >> .env
        echo "UID=$(id -u oskar)" >> .env
        echo "GID=$(getent group www-data | cut -d: -f3)" >> .env

    - name: Uzupełnij środowisko dla modułów
      run: |
        export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
        export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
        MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
        ESCAPED_MAIL_PASSWORD=$(printf '%s\n' "$MAIL_PASSWORD" | sed 's/[\&/]/\\&/g')
        export MEILISEARCH_KEY="${{ secrets.MEILISEARCH_KEY }}"

        cd /home/oskar/var/www/deploy-repo/prod_My_Resume
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}"
        sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${DB_PASSWORD}#" .env
        sed -i "s#REDIS_PASSWORD=.*#REDIS_PASSWORD=${REDIS_PASSWORD}#" .env
        sed -i "s|MAIL_PASSWORD=.*|MAIL_PASSWORD=\"$ESCAPED_MAIL_PASSWORD\"|" .env

        cd /home/oskar/var/www/deploy-repo/StoryTime
        sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${DB_PASSWORD}#" .env
        sed -i "s#REDIS_PASSWORD=.*#REDIS_PASSWORD=${REDIS_PASSWORD}#" .env
        sed -i "s#MEILISEARCH_KEY=.*#MEILISEARCH_KEY=${MEILISEARCH_KEY}#" .env

    - name: Stop and clean containers
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose down --volumes --remove-orphans

    - name: Prepare certbot directories
      run: |
        cd /home/oskar/var/www/deploy-repo
        mkdir -p ./certbot/conf ./certbot/www
        # chmod -R 755 ./certbot
        # chown -R $(id -u):$(id -g) ./certbot

    - name: Start fresh clean containers
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose up -d --build

    - name: Change ownership and perms via Docker
      run: |
        docker run --rm \
          -v /home/oskar/var/www/deploy-repo:/app \
          --workdir /app/StoryTime \
          app_storytime \
          sh -c "chown -R www-data:www-data storage public && chmod -R 775 storage && chmod -R 755 public"

        docker run --rm \
          -v /home/oskar/var/www/deploy-repo:/app \
          --workdir /app/prod_My_Resume \
          app_resume \
          sh -c "chown -R www-data:www-data storage public && chmod -R 775 storage && chmod -R 755 public"

    - name: Install composer deps
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm composer_resume install --no-dev --optimize-autoloader
        docker-compose run --rm composer_storytime install --no-dev --optimize-autoloader


    #test
    # - name: Install npm dependencies and build
    #   run: |
    #     docker run --rm -v $PWD/prod_My_Resume:/app -w /app node:22-alpine sh -c "npm install && npm run build"
    #     docker run --rm -v $PWD/StoryTime:/app -w /app node:22-alpine sh -c "npm install && npm run build"

    # - name: Run database migrations
    #   run: |
    #     docker compose run --rm artisan_resume migrate --force
    #     docker compose run --rm artisan_storytime migrate --force