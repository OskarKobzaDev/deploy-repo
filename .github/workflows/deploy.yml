env:
  UID: 1000
  GID: 33

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Check user
      run: |
        whoami
        id

    - name: Reset ownership via Docker
      run: |
        docker run --rm \
          -v /home/oskar/var/www/deploy-repo:/data \
          alpine \
          chown -R "${UID}:${GID}" /data || true

    - name: Remove old repo
      run: rm -rf /home/oskar/var/www/deploy-repo

    - name: Clone fresh repo with submodules
      run: |
        git clone --recurse-submodules git@github.com:OskarKobzaDev/deploy-repo.git /home/oskar/var/www/deploy-repo

    - name: Copy .env files
      run: |
        cp /home/oskar/var/www/deploy-repo/prod_My_Resume/.env.prod.example /home/oskar/var/www/deploy-repo/prod_My_Resume/.env
        cp /home/oskar/var/www/deploy-repo/StoryTime/.env.prod.example /home/oskar/var/www/deploy-repo/StoryTime/.env

    - name: Create .env file for docker compose and set init file for mysql
      run: |
        cd /home/oskar/var/www/deploy-repo
        export MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}"
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
        echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
        echo "MEILISEARCH_KEY=${{ secrets.MEILISEARCH_KEY }}" >> .env
        echo "UID=$(id -u oskar)" >> .env
        echo "GID=$(getent group www-data | cut -d: -f3)" >> .env
        envsubst < mysql-init/init.sql.template > mysql-init/init.sql

    - name: Uzupełnij środowisko dla modułów
      run: |
        export MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}"
        export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
        MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
        ESCAPED_MAIL_PASSWORD=$(printf '%s\n' "$MAIL_PASSWORD" | sed 's/[\&/]/\\&/g')
        export MEILISEARCH_KEY="${{ secrets.MEILISEARCH_KEY }}"

        cd /home/oskar/var/www/deploy-repo/prod_My_Resume
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}"
        sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${MYSQL_PASSWORD}#" .env
        sed -i "s#REDIS_PASSWORD=.*#REDIS_PASSWORD=${REDIS_PASSWORD}#" .env
        sed -i "s|MAIL_PASSWORD=.*|MAIL_PASSWORD=\"$ESCAPED_MAIL_PASSWORD\"|" .env

        cd /home/oskar/var/www/deploy-repo/StoryTime
        sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${MYSQL_PASSWORD}#" .env
        sed -i "s#REDIS_PASSWORD=.*#REDIS_PASSWORD=${REDIS_PASSWORD}#" .env
        sed -i "s#MEILISEARCH_KEY=.*#MEILISEARCH_KEY=${MEILISEARCH_KEY}#" .env

    - name: Stop and clean containers
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose down --volumes --remove-orphans

    - name: Prepare certbot and nginx directories via Docker
      run: |
        docker run --rm \
          -v /home/oskar/var/www/deploy-repo:/data \
          alpine \
          sh -c "mkdir -p /data/certbot/conf /data/certbot/www /data/certbot/logs /data/certbot/work /data/nginx/logs && \
                 chmod -R 755 /data/certbot && \
                 chmod -R 755 /data/nginx && \
                 chown -R ${UID}:${GID} /data/nginx && \
                 chown -R ${UID}:${GID} /data/certbot" || true

    - name: Download options-ssl-nginx.conf
      run: |
        curl -sSL https://raw.githubusercontent.com/certbot/certbot/main/certbot-nginx/src/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf \
          -o /home/oskar/var/www/deploy-repo/certbot/conf/options-ssl-nginx.conf

    - name: Start fresh clean containers
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose up -d --build

    - name: Run certbot for oskarkobza.pl i storytimedemo
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm certbot_init certonly \
          --webroot \
          -w /var/www/certbot \
          --email oskar@oskarkobza.pl \
          -d oskarkobza.pl -d www.oskarkobza.pl \
          -d storytimedemo.oskarkobza.pl -d www.storytimedemo.oskarkobza.pl \
          --agree-tos \
          --no-eff-email \
          --force-renewal

    - name: Change nginx configuration to ssl
      run: |
        cp /home/oskar/var/www/deploy-repo/nginx/default-ssl.conf /home/oskar/var/www/deploy-repo/nginx/default.conf

    - name: Generate openSSL file
      run: |
        openssl dhparam -out /home/oskar/var/www/deploy-repo/certbot/conf/ssl-dhparams.pem 2048

    - name: Reload nginx
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker restart my-nginx

    - name: Install composer deps
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm composer_resume install --optimize-autoloader
        docker-compose run --rm composer_storytime install --optimize-autoloader

    - name: Generate applications keys
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm artisan_resume key:generate --force
        docker-compose run --rm artisan_storytime key:generate --force

    - name: Run migrations and seed storytime
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm artisan_storytime migrate --force
        docker-compose run --rm artisan_storytime db:seed --force

    - name: Run migrations and seed resume
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm artisan_resume migrate --force
        docker-compose run --rm artisan_resume db:seed --force

    - name: Install node deps and build assets resume
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm npm_resume install
        docker-compose run --rm npm_resume run build

    - name: Install node deps and build assets storytime
      run: |
        cd /home/oskar/var/www/deploy-repo
        docker-compose run --rm npm_storytime install
        docker-compose run --rm npm_storytime run build
